openapi: 3.1.0

info:
  title: Gameye Match API
  version: "0.0.0-local"
  description: |

    The Gameye Match API let's you spawn containerized game servers without having to worry about geographic capacity 
    or scalability. All API endpoints together offer a complete suite of features to host a dedicated server based multiplayer game.

    # Authentication
    We use Bearer Tokens for authentication. 
    You must send this token in the Authorization header in all requests.

    ```Authorization: Bearer <token>```
  x-logo:
    url: https://static.gameye.com/images/android-chrome-512x512.png
    altText": "Gameye Logo"

servers:
  - url: https://api.gameye.io

security:
  - api-token: []

paths:
  /readiness:
    get:
      operationId: readiness
      security: []
      responses:
        "204":
          description: |
            This is ready to accept new requests
        "503":
          description: |
            Server is not ready!

  /liveness:
    get:
      operationId: liveness
      security: []
      responses:
        "204":
          description: |
            Server is alive and kicking!
        "503":
          description: |
            This server is dead

  /command/start-match:
    post:
      deprecated: true
      operationId: start-match
      summary: "Create a match"
      description: |
        Create a new on-demand game server.

        The `config` object can be used to pass any dynamic parameters directly to the game server executable.
        Either as a startup parameters, configfile or environment variable. For more info see https://docs.gameye.com/docs/using-the-igniter-tool

        > ### Important
        > In extreme cases it can take up 50 seconds to start a server, after which we produce a time-out.
        > Please adjust the time-out settings of your client accordingly.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - matchKey
                - gameKey
                - locationKeys
                - templateKey
                - config
              properties:
                matchKey:
                  type: string
                  minLength: 1
                  description: |
                    unique match id
                  example: "my-awesome-match"
                gameKey:
                  type: string
                  minLength: 1
                  description: |
                    game id
                  example: "csgo"
                locationKeys:
                  type: array
                  items:
                    type: string
                    minLength: 1
                    example: "eu-west"
                  minItems: 1
                  description: |
                    location id

                    for available locations see https://docs.gameye.com/docs/choosing-your-server-locations
                templateKey:
                  type: string
                  minLength: 1
                  description: |
                    template id
                  example: "esl1on1"
                config:
                  type: object
                  additionalProperties: true
                  description: |
                    any custom parameters you want to add
                endCallbackUrl:
                  type: string
                  minLength: 1
                  description: "URL to call when the match has ended, optional"
                  example: "https://yourbackend/matchid"
                restart:
                  type: boolean
                  description: "A flag that indicates whether the match should always restart or not. This is an optional field and will yield 'false' if not provided."
                sortAdvantages:
                  type: array
                  description: "A list of advantages to sort on whilst searching for an appropriate machine to run the match on."
                  items: { type: string }
                  default: ["price"]
            example:
              {
                "matchKey": "my-awesome-match",
                "gameKey": "shooter-game",
                "locationKeys": ["eu-west"],
                "templateKey": "deathmatch",
                "config": { "map": "de_dust" },
                "endCallbackUrl": "https://mybackend/matchid",
                "restart": true,
                "sortAdvantages": ["price"],
              }
      responses:
        "200":
          description: |
            Match was started
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - id
                  - image
                  - location
                  - host
                  - created
                  - port
                properties:
                  id:
                    type: string
                  image:
                    type: string
                  location:
                    type: string
                  host:
                    type: string
                  created:
                    type: integer
                  port:
                    type: object
                    additionalProperties:
                      type: integer

              example:
                {
                  "id": "my-awesome-match",
                  "image": "shooter-game",
                  "location": "eu-west",
                  "host": "127.0.0.1",
                  "port": { "game": 65424, "query": 53423 },
                  "created": 1589471457344,
                }
        "400":
          description: |
            Bad request
        "401":
          description: |
            You are not authorized
        "409":
          description: |
            MatchKey has already been used
        "503":
          description: |
            Location temporary out of capacity

  /action/start-match:
    post:
      deprecated: true
      operationId: start-match-action
      summary: "Create a match"
      description: |
        Create a new on-demand game server.

        The `config` object can be used to pass any dynamic parameters directly to the game server executable.
        Either as a startup parameters, configfile or environment variable. For more info see https://docs.gameye.com/docs/using-the-igniter-tool

        > ### Important
        > In extreme cases it can take up 50 seconds to start a server, after which we produce a time-out.
        > Please adjust the time-out settings of your client accordingly.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - matchKey
                - gameKey
                - locationKeys
                - templateKey
                - config
              properties:
                matchKey:
                  type: string
                  minLength: 1
                  description: |
                    unique match id
                  example: "my-awesome-match"
                gameKey:
                  type: string
                  minLength: 1
                  description: |
                    game id
                  example: "csgo"
                locationKeys:
                  type: array
                  items:
                    type: string
                    minLength: 1
                    example: "eu-west"
                  minItems: 1
                  description: |
                    location id

                    for available locations see https://docs.gameye.com/docs/choosing-your-server-locations
                templateKey:
                  type: string
                  minLength: 1
                  description: |
                    template id
                  example: "esl1on1"
                config:
                  type: object
                  additionalProperties: true
                  description: |
                    any custom parameters you want to add
                endCallbackUrl:
                  type: string
                  minLength: 1
                  description: "URL to call when the match has ended, optional"
                  example: "https://yourbackend/matchid"
                restart:
                  type: boolean
                  description: "A flag that indicates whether the match should always restart or not. This is an optional field and will yield 'false' if not provided."
                sortAdvantages:
                  type: array
                  description: "A list of advantages to sort on whilst searching for an appropriate machine to run the match on."
                  items: { type: string }
                  default: ["price"]
            example:
              {
                "matchKey": "my-awesome-match",
                "gameKey": "shooter-game",
                "locationKeys": ["eu-west"],
                "templateKey": "deathmatch",
                "config": { "map": "de_dust" },
                "endCallbackUrl": "https://mybackend/matchid",
                "restart": true,
                "sortAdvantages": ["price"],
              }
      responses:
        "200":
          description: |
            Match was started
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - id
                  - image
                  - location
                  - host
                  - created
                  - port
                properties:
                  id:
                    type: string
                  image:
                    type: string
                  location:
                    type: string
                  host:
                    type: string
                  created:
                    type: integer
                  port:
                    type: object
                    additionalProperties:
                      type: integer

              example:
                {
                  "id": "my-awesome-match",
                  "image": "shooter-game",
                  "location": "eu-west",
                  "host": "127.0.0.1",
                  "port": { "game": 65424, "query": 53423 },
                  "created": 1589471457344,
                }
        "400":
          description: |
            Bad request
        "401":
          description: |
            You are not authorized
        "409":
          description: |
            MatchKey has already been used
        "503":
          description: |
            Location temporary out of capacity

  /command/stop-match:
    post:
      operationId: stop-match
      summary: "Stop a match"
      description: |
        Force shutdown the game server.

        The game server process inside the container will receive `SIGTERM`.

        > ### Important
        > 
        > Depending on the game server it can take up to 20 seconds before the shutdown is completed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - matchKey
              properties:
                matchKey: { type: string, minLength: 1 }
            example: { "matchKey": "my-awesome-match" }
      responses:
        "204":
          description: |
            Match was stopped
        "401":
          description: |
            You are not authorized
        "404":
          description: |
            Match was not found
        "409":
          description: |
            Match has already been stopped

  /action/stop-match:
    post:
      operationId: stop-match-action
      summary: "Stop a match"
      description: |
        Force shutdown the game server.

        The game server process inside the container will receive `SIGTERM`.

        > ### Important
        > 
        > Depending on the game server it can take up to 20 seconds before the shutdown is completed.
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - matchKey
              properties:
                matchKey: { type: string, minLength: 1 }
            example: { "matchKey": "my-awesome-match" }
      responses:
        "204":
          description: |
            Match was stopped
        "401":
          description: |
            You are not authorized
        "404":
          description: |
            Match was not found
        "409":
          description: |
            Match has already been stopped

  /query/match:
    get:
      operationId: get-matches
      summary: "Get all matches"
      description: |
        Fetches a list of all active matches.

        Note that this list only displays **active** matches. When the game server process stops, the match is almost instantly removed from the list.
      responses:
        "200":
          description: |
            Retrieved all matches
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - match
                properties:
                  match:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - matchKey
                        - gameKey
                        - locationKey
                        - host
                        - created
                        - port
                      properties:
                        matchKey: { type: string }
                        gameKey: { type: string }
                        locationKey: { type: string }
                        host: { type: string }
                        created: { type: string }
                        port:
                          type: object
                          additionalProperties: { type: number }

              example:
                {
                  "match":
                    {
                      "83433e65-caac-4820-b8e7-875b86dd4994":
                        {
                          "matchKey": "83433e65-caac-4820-b8e7-875b86dd4994",
                          "gameKey": "shooter-game",
                          "locationKey": "eu-west",
                          "host": "127.0.0.1",
                          "created": 1588944190593,
                          "port": { "game": 63857, "gotv": 57599 },
                        },
                      "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae":
                        {
                          "matchKey": "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae",
                          "gameKey": "shooter-game",
                          "locationKey": "us-central",
                          "host": "192.168.1.1",
                          "created": 1583164808454,
                          "port": { "game": 56900, "query": 53912 },
                        },
                    },
                }
        "401":
          description: |
            You are not authorized

  /fetch/match:
    get:
      operationId: get-matches-fetch
      deprecated: true
      summary: "Get all matches"
      description: |
        Fetches a list of all active matches.

        Note that this list only displays **active** matches. When the game server process stops, the match is almost instantly removed from the list.
      responses:
        "200":
          description: |
            Retrieved all matches
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "match":
                    {
                      "83433e65-caac-4820-b8e7-875b86dd4994":
                        {
                          "matchKey": "83433e65-caac-4820-b8e7-875b86dd4994",
                          "gameKey": "shooter-game",
                          "locationKey": "eu-west",
                          "host": "127.0.0.1",
                          "created": 1588944190593,
                          "port": { "game": 63857, "gotv": 57599 },
                        },
                      "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae":
                        {
                          "matchKey": "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae",
                          "gameKey": "shooter-game",
                          "locationKey": "us-central",
                          "host": "192.168.1.1",
                          "created": 1583164808454,
                          "port": { "game": 56900, "query": 53912 },
                        },
                    },
                }
        "401":
          description: |
            You are not authorized

  /query/log:
    get:
      operationId: log
      summary: "Get match logs"
      description: |
        Fetch the output that the game server writes to standard out (stdout).

        This endpoint can used to provide secure and automated access to debug server related issues.

        > ### Important
        > Note that the logs can only be fetched after the match is stopped and that the logs are available 
        > up to **four** hours after the match has entered the stopped state.

      parameters:
        - name: matchKey
          in: query
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        "200":
          description: |
            Retrieved logs for a match
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "3":
                    {
                      "lineKey": 3,
                      "payload": "Server will auto-restart if there is a crash.\n",
                    },
                  "4":
                    {
                      "lineKey": 4,
                      "payload": "LD_LIBRARY_PATH=/home/steam/csgo/bin:/home/steam/csgo:/home/steam/csgo/bin:\n",
                    },
                  "5": { "lineKey": 5, "payload": "#\n" },
                  "6": { "lineKey": 6, "payload": "#Console initialized.\n" },
                }
        "401":
          description: |
            You are not authorized
        "404":
          description: |
            Match was not found

  /fetch/log:
    get:
      operationId: log-fetch
      deprecated: true
      summary: "Get match logs"
      description: |
        Fetch the output that the game server writes to standard out (stdout).

        This endpoint can used to provide secure and automated access to debug server related issues.

        > ### Important
        > Note that the logs can only be fetched after the match is stopped and that the logs are available 
        > up to **four** hours after the match has entered the stopped state.

      parameters:
        - name: matchKey
          in: query
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        "200":
          description: |
            Retrieved logs for a match
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "3":
                    {
                      "lineKey": 3,
                      "payload": "Server will auto-restart if there is a crash.\n",
                    },
                  "4":
                    {
                      "lineKey": 4,
                      "payload": "LD_LIBRARY_PATH=/home/steam/csgo/bin:/home/steam/csgo:/home/steam/csgo/bin:\n",
                    },
                  "5": { "lineKey": 5, "payload": "#\n" },
                  "6": { "lineKey": 6, "payload": "#Console initialized.\n" },
                }
        "401":
          description: |
            You are not authorized
        "404":
          description: |
            Match was not found

  /artifacts:
    get:
      operationId: artifacts
      summary: "Get match artifacts"
      description: |
        Start download of an artifact

        ### Providing the path parameter
        The path should be an absolute Linux path to a specific file or folder.

        Example:
        /home/{user}/{game-folder-name}/crashdump.log

        ### Downloading the artefact
        When you fetch the artifact a download of .tar.gz archive will be started that contains your requested file or folder. Please limit your download in size to a maximum of 100mb.

        > ### Important
        > 
        > Please note that the artifact is only available for download post-match and will be downloaded directly from the container itself.
      parameters:
        - name: session
          in: query
          required: true
          description: |
            Match ID
          schema: { type: string, minLength: 1 }
        - name: path
          in: query
          required: true
          description: |
            local container path to the file or folder you want to download
          schema: { type: string, minLength: 1 }
      responses:
        "200":
          description: |
            Downloading artifact in the .tar format
          content:
            application/x-tar: {}
        "401":
          description: |
            You are not authorized
        "404":
          description: |
            Match was not found

  /session:
    post:
      operationId: session-run
      summary: Run a session
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              additionalProperties: false
              required:
                - id
                - location
                - image
                - env
                - args
                - restart
              properties:
                id: { type: string, minLength: 1 }
                location: { type: string, minLength: 1 }
                image: { type: string, minLength: 1 }
                env:
                  type: object
                  additionalProperties: { type: string, minLength: 1 }
                args:
                  type: array
                  items: { type: string, minLength: 1 }
                restart: { type: boolean }
      responses:
        "201":
          description: |
            The session is started!
          content:
            "application/json":
              schema:
                type: object
                additionalProperties: false
                required:
                  - host
                  - ports
                properties:
                  host:
                    type: string
                  ports:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      required:
                        - type
                        - container
                        - host
                      properties:
                        type: { type: string, enum: [tcp, udp] }
                        container: { type: integer, minimum: 1, maximum: 65535 }
                        host: { type: integer, minimum: 32768, maximum: 65535 }

        "420":
          description: |
            This session can currently not be started in the provided location. This could also be the result of starting too many sessions in a short period of time. Please try again later!

  /metrics:
    get:
      operationId: metrics
      summary: Scrape metrics
      responses:
        "200":
          description: ok
          content:
            "text/plain":
              schema:
                type: string

components:
  securitySchemes:
    api-token:
      type: http
      scheme: bearer
      bearerFormat: token
      description: |
        We use Bearer Tokens for authentication. 
        You must send this token in the Authorization header in all requests.

        ```Authorization: Bearer <token>```

externalDocs:
  url: https://docs.gameye.com
