openapi: 3.1.0

info:
  title: Gameye Session API
  version: "0.0.0-local"
  description: |
    The Gameye Session API offers an agnostic way of hosting containerized game sessions without 
    having to worry about geographic capacity or scalability issues. The API offers a complete 
    suite of features to host a server based multiplayer game.

    # Authentication
    All endpoints of the Gameye Session API require authorization. This is done through
    Bearer Token Authentication. A bearer token is thus required in the header of each request.
    For example:

    ```Authorization: Bearer <token>```

  x-logo:
    url: https://static.gameye.com/images/android-chrome-512x512.png
    altText": "Gameye Logo"

servers:
  - url: https://api.gameye.io

security:
  - api-token: []

paths:
  /session:
    post:
      operationId: session-run
      description: |
        Allocate a new game session in a specific region. Each session is to be identified by a
        unique identifier that is provided by the caller. It is recommended to use a UUID.

      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              additionalProperties: false
              required:
                - id
                - location
                - image
                - env
                - args
                - restart
              properties:
                id:
                  type: string
                  description: |
                    The unique identifier of the session.
                  minLength: 1
                location:
                  type: string
                  description: |
                    The location or region that the game session is preferred to be hosted in.
                  minLength: 1
                image:
                  type: string
                  description: |
                    The name of the image of the game to host inside a container.
                  minLength: 1
                env:
                  type: object
                  description: |
                    The list of environment variables to feed the container on startup.
                  additionalProperties:
                    type: string
                    minLength: 1
                  example:
                    { "env": { "my-secret": "<some_very_secret_value>" } }
                args:
                  type: array
                  description: |
                    The list of program console arguments to feed to the application hosted
                    inside the container.
                  items:
                    type: string
                    minLength: 1
                  example: ["--max-players=8", "--match-type=quick-play"]
                restart:
                  description: |
                    Indicates whether this session must be automatically restarted on failure.
                    The container will not be restarted in case of a manual termination.
                  type: boolean
                labels:
                  type: object
                  additionalProperties:
                    type: string
                  description: |
                    The collection of user-defined key/value metadata stored inside the 
                    configuration of the session.
                  example:
                    {
                      "labels":
                        { "my-example-tag": "1", "another-example-tag": "3" },
                    }

            example:
              {
                "id": "this-is-my-test-session-101",
                "location": "europe",
                "image": "my-very-special-game",
                "env": { "my-secret": "<my_secret_value" },
                "args": ["--max-players=8"],
                "labels": { "my-example-tag": "1", "another-example-tag": "3" },
                "restart": false,
              }
      responses:
        201:
          description: |
            A session has successfully been started on a machine in the provided location.
          content:
            "application/json":
              schema:
                type: object
                additionalProperties: false
                required:
                  - host
                  - ports
                properties:
                  host:
                    type: string
                    description: |
                      The IP address of the machine that the session is running on.
                  ports:
                    type: array
                    description: |
                      The list of mapped ports for this session.
                    items:
                      type: object
                      additionalProperties: false
                      required:
                        - type
                        - container
                        - host
                      properties:
                        type:
                          type: string
                          description: |
                            The type of protocol of this port entry.
                          enum: [tcp, udp]
                        container:
                          type: integer
                          description: |
                            The port of the container that is hosted on the machine.
                          minimum: 1
                          maximum: 65535
                        host:
                          type: integer
                          description: |
                            The host port for mapping the container port.
                          minimum: 32768
                          maximum: 65535

              example:
                {
                  "host": "a.b.c.d",
                  "ports":
                    [
                      { "type": "tcp", "container": 80, "host": 49159 },
                      { "type": "tcp", "container": 80, "host": 49159 },
                    ],
                }

        401:
          description: |
            You are not authorized to start a session. Please make sure that the included bearer
            token is correct.

        404:
          description: |
            The request contains a location, image or organization that does not exist.

        409:
          description: |
            Cannot start a session with the provided id. Please use a unique identifier
            for your session. It is recommended to use a UUID.

        420:
          description: |
            This session can not be started in the provided location currently. This could also be
            the result of starting too many sessions in a short period of time. 
            Please try again later!

        422:
          description: |
            Bad request. This may imply that the given request has invalid syntax.

    get:
      operationId: session-list
      parameters:
        - name: filter
          in: query
          required: false
          style: deepObject
          schema:
            type: object
            description: |
              A list or record of tags to filter a list of sessions on. If none of the
              sessions meet the provided filter criteria, naturally an empty list of sessions
              is returned.
            additionalProperties:
              type: string
      description: |
        Lists all of the active sessions that are tied to your API token. Note that it only returns
        sessions that are active. Those that have already been stopped, will not be included.

      responses:
        200:
          description: |
            Successfully looked up all of the active sessions that are tied to your API token.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - sessions
                properties:
                  sessions:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - image
                        - location
                        - host
                        - created
                        - port
                      properties:
                        id:
                          type: string
                          description: |
                            The unique identifier of the session.
                        image:
                          type: string
                          description: |
                            The name of the image of the game that is hosted inside the container.
                        location:
                          type: string
                          description: |
                            The location or region that the game session is hosted in.
                        host:
                          type: string
                          description: |
                            The IP address of the host machine the game session is hosted on.
                          example: "a.b.c.d"
                        created:
                          type: number
                          description: |
                            The unix timestamp the session was created in.
                          example: 1648472895000
                        port:
                          type: object
                          description: |
                            The list of exposed ports for this container.
                          additionalProperties:
                            type: number
                          example: { "port": { "80/tcp": 49160 } }
                        labels:
                          type: object
                          additionalProperties:
                            type: string
                          description: |
                            The collection of user-defined key/value metadata stored inside the 
                            configuration of the session.
                          example:
                            {
                              "labels":
                                {
                                  "env": '{"GAMEYE_SESSION_ID":"c595bc6f-8522-4a62-95cd-8742136643ea","GAMEYE_HOST":"a.b.c.d"}',
                                  "tags": '{"my-example-tag":"1","another-example-tag":"3"}',
                                },
                            }

              example:
                {
                  "sessions":
                    [
                      {
                        "id": "c595bc6f-8522-4a62-95cd-8742136643ea",
                        "image": "my-very-special-game",
                        "location": "frankfurt",
                        "host": "a.b.c.d",
                        "created": 1648472895000,
                        "port": { "80/tcp": 49160 },
                        "labels":
                          {
                            "env": '{"GAMEYE_SESSION_ID":"this-is-my-test-session-103","GAMEYE_HOST":"a.b.c.d"}',
                            "tags": '{"my-example-tag":"1","another-example-tag":"3"}',
                          },
                      },
                    ],
                }

        401:
          description: |
            You are not authorized to fetch a list of active sessions. Please make sure that the 
            included bearer token is correct.

  /session/{id}:
    delete:
      operationId: session-stop
      description: |
        Stops an active session from running by killing the underlying container. The container
        is killed by sending in a SIGTERM signal. This process may take a few seconds to complete.

      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The id of the session.

      responses:
        204:
          description: |
            The session has successfully been terminated.

        401:
          description: |
            You are not authorized to stop a session. Please make sure that the 
            included bearer token is correct.

        404:
          description: |
            The specified session does not exist. Please provide a correct session id.

        409:
          description: |
            This session has already been terminated.

  /artifacts:
    get:
      operationId: artifacts
      summary: "Download an artifact file from the underlying container."
      description: |
        Initiates a download of an artifact which could be a file or a folder inside the underlying
        container. The path should be an absolute Unix path to a specific file or folder.

        The artifact will be provided in the form of a .tar.gz archive that contains your requested
        file or folder. Please limit your download in size to a maximum of 100mb.

        Please note that the artifact is only available for download after the session has been
        terminated and will be downloaded directly from the container itself.

        Also note that the container will stay on the machine that the session was running on for 
        at most 8 hours. This means that your artifact may or may not be available post termination.
      parameters:
        - name: session
          in: query
          required: true
          description: |
            The id of the session to download an artifact from.
          schema:
            type: string
            minLength: 1
            example: "c595bc6f-8522-4a62-95cd-8742136643ea"
        - name: path
          in: query
          required: true
          description: |
            The local path inside the container to the target file or folder requested
            for download.
          schema:
            type: string
            minLength: 1
            example: "/home/{user}/{game-folder-name}/crashdump.log"
      responses:
        200:
          description: |
            A download of the artifact in .tar.gz format has been initiated.
          content:
            application/x-tar: {}

        401:
          description: |
            You are not authorized to fetch an artifact. Please make sure that the 
            included bearer token is correct.

        404:
          description: |
            Could not find a session with the given session id. It is possible that either the
            session has never existed at all or the container's lifespan on the machine has
            expired (with regards to the at-most 8 hour window).

  /logs:
    get:
      operationId: stream-std-logs
      summary: "Get real-time logs"
      description: |
        Fetch the output that the game server writes to standard out-and standard err. Unlike 
        /fetch/log, this endpoint opens up a stream that can be invoked-and kept open until the
        underlying container of the game server has been terminated. It can therefore be used
        to provide secure and automated access to debug server related issues.

        There are two content types available:
          - text/plain
          - application/json

        The text/plain can be used for regular purposes e.g debugging your containerized application.
        The application/json content type on the other hand, is used for advanced use cases where it
        is necessary to distinguish between the different stream types.

      parameters:
        - name: matchKey
          in: query
          deprecated: true
          required: true
          schema:
            type: string
            description: |
              The id of the session to retrieve logs from the underlying container.
              Do note that this parameter is deprecated and to be replaced in favour
              of a new parameter with more consistent naming.
            minLength: 1
      responses:
        200:
          description: |
            A stream of logs has been opened that will continue to stream any
            logs from the underlying container until the container has been 
            terminated.
          content:
            "application/json":
              schema:
                type: object
                additionalProperties: false
                required:
                  - streamType
                  - line
                properties:
                  streamType:
                    type: number
                    description: |
                      The type of console log stream that the log line originates from. This number
                      is based off the STREAM_TYPE value from Docker's stream protocol.

                      See: https://docs.docker.com/engine/api/v1.41/#operation/ContainerAttach

                      "STREAM_TYPE can be:
                        0: stdin (is written on stdout)
                        1: stdout
                        2: stderr"

                    example: 1
                  line:
                    type: string
                    description: "The log line outputted from the underlying stream."
                    minLength: 0
            "text/plain": {}

        401:
          description: |
            You are not authorized. Please make sure that the 
            included bearer token is correct.

        404:
          description: |
            Could not find the associated session.

  /query/log:
    get:
      operationId: log
      summary: "Retrieves all logs from the container"
      description: |
        Retrieves all of the logs of a session from its underlying container. Logs written to both
        STDOUT and STDERR will be returned. This endpoint can used to provide secure and automated 
        access to debug server application related issues.

        Please note that the logs are only available for retrieval after the session has been
        terminated and will be taken directly from the container itself.

        Also note that the container will stay on the machine that the session was running on for 
        at most 8 hours. This means that your logs may or may not be available post termination.

        Unlike the `/logs` endpoint, this endpoint does NOT continue to stream new logs from the
        container. Once all logs have been retrieved, the underlying connection is closed.

      parameters:
        - name: matchKey
          in: query
          deprecated: true
          required: true
          schema:
            type: string
            description: |
              The id of the session to retrieve logs from the underlying container.
              Do note that this parameter is deprecated and to be replaced in favour
              of a new parameter with more consistent naming.
            minLength: 1
      responses:
        200:
          description: |
            Logs of the specified session have been retrieved.
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "3":
                    {
                      "lineKey": 3,
                      "payload": "Server will auto-restart if there is a crash.\n",
                    },
                  "4":
                    {
                      "lineKey": 4,
                      "payload": "LD_LIBRARY_PATH=/home/steam/csgo/bin:/home/steam/csgo:/home/steam/csgo/bin:\n",
                    },
                  "5": { "lineKey": 5, "payload": "#\n" },
                  "6": { "lineKey": 6, "payload": "#Console initialized.\n" },
                }
        401:
          description: |
            You are not authorized to fetch logs. Please make sure that the 
            included bearer token is correct.

        404:
          description: |
            Could not find the associated session.

  /metrics:
    get:
      operationId: metrics
      summary: Scrapes metrics of sessions that are tied to your API key.
      responses:
        200:
          description: |
            Successfully scraped metrics of your sessions.
          content:
            text/plain:
              schema:
                type: string
                description: |
                  A metric as a key-value pair.
                example: session_count 1

  /command/start-match:
    post:
      deprecated: true
      operationId: start-match
      summary: "Create a match"
      description: |
        Create a new on-demand game server.

        The `config` object can be used to pass any dynamic parameters directly to the game server executable.
        Either as a startup parameters, configfile or environment variable. For more info see https://docs.gameye.com/docs/using-the-igniter-tool

        > ### Important
        > In extreme cases it can take up 50 seconds to start a server, after which we produce a time-out.
        > Please adjust the time-out settings of your client accordingly.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - matchKey
                - gameKey
                - locationKeys
                - templateKey
                - config
              properties:
                matchKey:
                  type: string
                  minLength: 1
                  description: |
                    unique match id
                  example: "my-awesome-match"
                gameKey:
                  type: string
                  minLength: 1
                  description: |
                    game id
                  example: "csgo"
                locationKeys:
                  type: array
                  items:
                    type: string
                    minLength: 1
                    example: "eu-west"
                  minItems: 1
                  description: |
                    location id

                    for available locations see https://docs.gameye.com/docs/choosing-your-server-locations
                templateKey:
                  type: string
                  minLength: 1
                  description: |
                    template id
                  example: "esl1on1"
                config:
                  type: object
                  additionalProperties: true
                  description: |
                    any custom parameters you want to add
                endCallbackUrl:
                  type: string
                  minLength: 1
                  description: "URL to call when the match has ended, optional"
                  example: "https://yourbackend/matchid"
                restart:
                  type: boolean
                  description: "A flag that indicates whether the match should always restart or not. This is an optional field and will yield 'false' if not provided."
                sortAdvantages:
                  type: array
                  description: "A list of advantages to sort on whilst searching for an appropriate machine to run the match on."
                  items: { type: string }
                  default: ["price"]
            example:
              {
                "matchKey": "my-awesome-match",
                "gameKey": "shooter-game",
                "locationKeys": ["eu-west"],
                "templateKey": "deathmatch",
                "config": { "map": "de_dust" },
                "endCallbackUrl": "https://mybackend/matchid",
                "restart": true,
                "sortAdvantages": ["price"],
              }
      responses:
        "200":
          description: |
            Match was started
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - id
                  - image
                  - location
                  - host
                  - created
                  - port
                properties:
                  id:
                    type: string
                  image:
                    type: string
                  location:
                    type: string
                  host:
                    type: string
                  created:
                    type: integer
                  port:
                    type: object
                    additionalProperties:
                      type: integer

              example:
                {
                  "id": "my-awesome-match",
                  "image": "shooter-game",
                  "location": "eu-west",
                  "host": "127.0.0.1",
                  "port": { "game": 65424, "query": 53423 },
                  "created": 1589471457344,
                }
        "400":
          description: |
            Bad request
        "401":
          description: |
            You are not authorized
        "409":
          description: |
            MatchKey has already been used
        "503":
          description: |
            Location temporary out of capacity

  /query/match:
    get:
      operationId: get-matches
      deprecated: true
      parameters:
        - name: filter
          in: query
          required: false
          style: deepObject
          schema:
            type: object
            additionalProperties:
              type: string
      summary: "Get all matches"
      description: |
        Fetches a list of all active matches.

        Note that this list only displays **active** matches. When the game server process stops, the match is almost instantly removed from the list.
      responses:
        "200":
          description: |
            Retrieved all matches
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - match
                properties:
                  match:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - matchKey
                        - gameKey
                        - locationKey
                        - host
                        - created
                        - port
                      properties:
                        matchKey:
                          type: string
                        gameKey:
                          type: string
                        locationKey:
                          type: string
                        host:
                          type: string
                        created:
                          type: number
                        port:
                          type: object
                          additionalProperties:
                            type: number
                        labels:
                          type: object
                          additionalProperties:
                            type: string
                          description: |
                            The collection of user-defined key/value metadata stored inside the 
                            configuration of the session.

              example:
                {
                  "match":
                    {
                      "83433e65-caac-4820-b8e7-875b86dd4994":
                        {
                          "matchKey": "83433e65-caac-4820-b8e7-875b86dd4994",
                          "gameKey": "shooter-game",
                          "locationKey": "eu-west",
                          "host": "127.0.0.1",
                          "created": 1588944190593,
                          "port": { "game": 63857, "gotv": 57599 },
                          "labels": { "my-example-label": "123" },
                        },
                      "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae":
                        {
                          "matchKey": "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae",
                          "gameKey": "shooter-game",
                          "locationKey": "us-central",
                          "host": "192.168.1.1",
                          "created": 1583164808454,
                          "port": { "game": 56900, "query": 53912 },
                          "labels": { "my-example-label": "123" },
                        },
                    },
                }
        401:
          description: |
            You are not authorized to fetch matches.

  /fetch/match:
    get:
      operationId: get-matches-fetch
      deprecated: true
      summary: "Get all matches"
      description: |
        Fetches a list of all active matches.

        Note that this list only displays **active** matches. When the game server process stops, 
        the match is almost instantly removed from the list.
      responses:
        200:
          description: |
            A list of active matches started by this user have been fetched.
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "match":
                    {
                      "83433e65-caac-4820-b8e7-875b86dd4994":
                        {
                          "matchKey": "83433e65-caac-4820-b8e7-875b86dd4994",
                          "gameKey": "shooter-game",
                          "locationKey": "eu-west",
                          "host": "127.0.0.1",
                          "created": 1588944190593,
                          "port": { "game": 63857, "gotv": 57599 },
                        },
                      "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae":
                        {
                          "matchKey": "76ffc16c-6b0b-4d55-bf8d-ae74b6d962ae",
                          "gameKey": "shooter-game",
                          "locationKey": "us-central",
                          "host": "192.168.1.1",
                          "created": 1583164808454,
                          "port": { "game": 56900, "query": 53912 },
                        },
                    },
                }
        401:
          description: |
            You are not authorized to fetch a match.

  /command/stop-match:
    post:
      operationId: stop-match
      deprecated: true
      summary: "Stop a match"
      description: |
        Force shutdown the game server.

        The game server process inside the container will receive `SIGTERM`.

        > ### Important
        > 
        > Depending on the game server it can take up to 20 seconds before the shutdown is completed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - matchKey
              properties:
                matchKey: { type: string, minLength: 1 }
            example: { "matchKey": "my-awesome-match" }
      responses:
        "204":
          description: |
            Match was stopped
        "401":
          description: |
            You are not authorized
        "404":
          description: |
            Match was not found
        "409":
          description: |
            Match has already been stopped

  /fetch/log:
    get:
      operationId: log-fetch
      deprecated: true
      summary: "Get match logs"
      description: |
        Fetch the output that the game server writes to standard out (stdout).

        This endpoint can used to provide secure and automated access to debug server related issues.

        > ### Important
        > Note that the logs can only be fetched after the match is stopped and that the logs are available 
        > up to **four** hours after the match has entered the stopped state.

      parameters:
        - name: matchKey
          in: query
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        "200":
          description: |
            Logs of the specified match have been retrieved.
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "3":
                    {
                      "lineKey": 3,
                      "payload": "Server will auto-restart if there is a crash.\n",
                    },
                  "4":
                    {
                      "lineKey": 4,
                      "payload": "LD_LIBRARY_PATH=/home/steam/csgo/bin:/home/steam/csgo:/home/steam/csgo/bin:\n",
                    },
                  "5": { "lineKey": 5, "payload": "#\n" },
                  "6": { "lineKey": 6, "payload": "#Console initialized.\n" },
                }
        401:
          description: |
            You are not authorized to fetch logs.

        404:
          description: |
            Could not find the specified match.

components:
  securitySchemes:
    api-token:
      type: http
      scheme: bearer
      bearerFormat: token
      description: |
        We use Bearer Tokens for authentication. 
        You must send this token in the Authorization header in all requests.

        ```Authorization: Bearer <token>```

externalDocs:
  url: https://docs.gameye.com
